> [type: function; value: Arr()]
--> [type: lbrace; value: {]
--> [type: id; value: mass]
--> [type: Sub; value: ;]
--> [type: id; value: mass]
--> [type: CallExpression; value: =]
----> [type: massive; value: []
----> [type: Num; value: 2]
----> [type: Sub; value: ,]
----> [type: Num; value: 3]
----> [type: Sub; value: ,]
----> [type: Num; value: 4]
----> [type: Sub; value: ,]
----> [type: Num; value: 32]
----> [type: Sub; value: ,]
----> [type: Num; value: 432]
----> [type: Sub; value: ,]
----> [type: Num; value: 453]
----> [type: Sub; value: ,]
----> [type: Num; value: 55]
----> [type: Sub; value: ,]
----> [type: Num; value: 66]
----> [type: Sub; value: ,]
----> [type: Num; value: 7]
----> [type: rsqparen; value: ]]
--> [type: id; value: count]
--> [type: Sub; value: ;]
--> [type: id; value: count]
--> [type: CallExpression; value: =]
--> [type: massive; value: mass]
--> [type: lsqparen; value: []
----> [type: Num; value: 0]
----> [type: rsqparen; value: ]]
--> [type: id; value: i]
--> [type: Sub; value: ;]
--> [type: id; value: i]
--> [type: CallExpression; value: =]
--> [type: Num; value: 0]
--> [type: CallExpression; value: While]
----> [type: lparen; value: (]
------> [type: comparasion; value: <]
------> [type: Num; value: 8]
------> [type: rparen; value: )]
----> [type: lbrace; value: {]
----> [type: CallExpression; value: if]
------> [type: lparen; value: (]
--------> [type: massive; value: mass]
--------> [type: lsqparen; value: []
----------> [type: rsqparen; value: ]]
--------> [type: comparasion; value: >]
--------> [type: massive; value: mass]
--------> [type: lsqparen; value: []
----------> [type: math; value: +]
----------> [type: id; value: i]
----------> [type: Num; value: 1]
----------> [type: rsqparen; value: ]]
--------> [type: rparen; value: )]
------> [type: lbrace; value: {]
------> [type: id; value: dfsdsfgfddfsd]
------> [type: Sub; value: ;]
------> [type: id; value: count]
------> [type: CallExpression; value: =]
------> [type: massive; value: mass]
------> [type: lsqparen; value: []
--------> [type: math; value: +]
--------> [type: id; value: i]
--------> [type: Num; value: 1]
--------> [type: rsqparen; value: ]]
------> [type: rbrace; value: }]
----> [type: increment; value: ++]
----> [type: Sub; value: ;]
----> [type: id; value: dfsfsd]
----> [type: Sub; value: ;]
----> [type: rbrace; value: }]
--> [type: rbrace; value: }]
> [type: id; value: asfdasfs]
> [type: Sub; value: ;]
> [type: function; value: Nod()]
--> [type: lbrace; value: {]
--> [type: id; value: a]
--> [type: Sub; value: ;]
--> [type: id; value: b]
--> [type: Sub; value: ;]
--> [type: id; value: a]
--> [type: CallExpression; value: =]
--> [type: Num; value: 130]
--> [type: id; value: b]
--> [type: CallExpression; value: =]
--> [type: Num; value: 11]
--> [type: id; value: a]
--> [type: CallExpression; value: =]
--> [type: math; value: %]
--> [type: id; value: a]
--> [type: math; value: /]
--> [type: math; value: /]
--> [type: id; value: a]
--> [type: CallExpression; value: =]
--> [type: math; value: +]
--> [type: id; value: a]
--> [type: rbrace; value: }]
> [type: function; value: Str()]
--> [type: lbrace; value: {]
--> [type: id; value: string]
--> [type: Sub; value: ;]
--> [type: id; value: string]
--> [type: CallExpression; value: =]
--> [type: StringLiteral; value: Hello World]
--> [type: id; value: subString]
--> [type: Sub; value: ;]
--> [type: id; value: subString]
--> [type: CallExpression; value: =]
--> [type: StringLiteral; value: el]
--> [type: id; value: i]
--> [type: Sub; value: ;]
--> [type: id; value: i]
--> [type: CallExpression; value: =]
--> [type: Num; value: 0]
--> [type: id; value: result]
--> [type: Sub; value: ;]
--> [type: CallExpression; value: While]
----> [type: lparen; value: (]
------> [type: comparasion; value: <]
------> [type: Num; value: 10]
------> [type: rparen; value: )]
----> [type: lbrace; value: {]
----> [type: CallExpression; value: if]
------> [type: lparen; value: (]
--------> [type: massive; value: string]
--------> [type: lsqparen; value: []
----------> [type: rsqparen; value: ]]
--------> [type: comparasion; value: ==]
--------> [type: massive; value: subString]
--------> [type: lsqparen; value: []
----------> [type: Num; value: 0]
----------> [type: rsqparen; value: ]]
--------> [type: and; value: &&]
--------> [type: massive; value: string]
--------> [type: lsqparen; value: []
----------> [type: math; value: +]
----------> [type: id; value: i]
----------> [type: Num; value: 1]
----------> [type: rsqparen; value: ]]
--------> [type: comparasion; value: ==]
--------> [type: massive; value: subString]
--------> [type: lsqparen; value: []
----------> [type: Num; value: 1]
----------> [type: rsqparen; value: ]]
--------> [type: rparen; value: )]
------> [type: lbrace; value: {]
------> [type: id; value: result]
------> [type: CallExpression; value: =]
------> [type: StringLiteral; value: true]
------> [type: rbrace; value: }]
----> [type: increment; value: ++]
----> [type: Sub; value: ;]
----> [type: rbrace; value: }]
--> [type: rbrace; value: }]
